[{"assignees":[],"body":"# Driver Registration/Edit Form\n\n[Previous content remains unchanged]\n\n## Approval Status\n- [x] Product Requirements Approved\n- [x] Technical Design Approved\n- [x] Test Plan Approved\n\n## Next Steps\n1. ~~PM to complete and submit product requirements for review~~\n2. ~~Once requirements are approved, Tech Lead to complete and submit technical design for review~~\n3. ~~Once technical design is approved, QA Lead to complete and submit test plan for review~~\n4. âœ… All sections are approved, development can begin\n\n## Development Plan\n1. Set up project structure and install necessary dependencies\n2. Implement base components (BaseInput, BaseSelect, BaseDatePicker, SensitiveInput, AddressInput)\n3. Create DriverForm component\n4. Implement useDriverForm composable\n5. Set up Pinia store for driver management\n6. Integrate with Supabase for data persistence\n7. Implement form validation\n8. Add responsive design and accessibility features\n9. Conduct unit and integration tests\n10. Perform end-to-end testing\n11. Address any issues found during testing\n12. Conduct final review and prepare for deployment\n\n## Current Tasks\n- [ ] Set up project structure\n- [ ] Install and configure required dependencies\n- [ ] Create base components\n- [ ] Begin implementation of DriverForm component\n\nTeam members can assign themselves to tasks and update their status as they progress.","labels":[{"id":"LA_kwDOMbwxg88AAAABsIO_0Q","name":"enhancement","description":"New feature or request","color":"a2eeef"}],"number":8,"title":"Driver Registration/Edit Form - Requirements, Technical Design, and Test Plan"},{"assignees":[],"body":"# Driver Registration/Edit Form - Test Plan\n\n## 1. Unit Tests\n\n### 1.1 Component Tests\n\n#### DriverForm.vue\n- Test rendering of all form fields\n- Validate required fields are marked correctly\n- Check initial state with and without initialData prop\n- Verify form submission is disabled when required fields are empty\n- Test form submission with valid data\n- Verify error messages for invalid inputs\n\n#### BaseInput.vue\n- Test rendering with different input types (text, email, tel, password)\n- Verify masking functionality for sensitive fields\n- Test validation rules (required, regex, min, max)\n- Check error message display\n\n#### BaseSelect.vue\n- Test rendering with different options\n- Verify selection functionality\n- Test validation rules\n\n#### BaseDatePicker.vue\n- Test date selection functionality\n- Verify min and max date constraints\n- Test validation rules\n\n### 1.2 Composable Tests\n\n#### useDriverForm.ts\n- Test initialization with and without initialData\n- Verify form validation logic\n- Test form submission function\n- Check error handling for API calls\n\n### 1.3 API Integration Tests\n\n#### api/driver.ts\n- Mock Supabase calls and test submitDriverInfo function\n- Verify error handling for API failures\n\n## 2. Integration Tests\n\n### 2.1 Form Interaction Tests\n- Test form filling with valid data\n- Verify form submission and API call\n- Test form editing with pre-filled data\n- Check interaction between form fields (e.g., status changes based on other inputs)\n\n### 2.2 Data Flow Tests\n- Verify data flow from form inputs to Supabase\n- Test data retrieval and population in edit mode\n\n## 3. End-to-End Tests\n\n### 3.1 User Flow Tests\n- Complete driver registration process\n- Edit existing driver information\n- Test navigation between registration and edit pages\n\n### 3.2 Error Handling and Edge Cases\n- Test form submission with network disconnection\n- Verify handling of server errors\n- Test with extremely long input values\n\n## 4. Performance and Compatibility Tests\n\n### 4.1 Performance Tests\n- Measure form render time\n- Test form performance with large datasets (many team options, etc.)\n- Verify responsiveness of real-time validation\n\n### 4.2 Compatibility Tests\n- Test on different browsers (Chrome, Firefox, Safari, Edge)\n- Verify responsive design on various device sizes\n- Test on both desktop and mobile devices\n\n## 5. Accessibility Tests\n\n- Verify all form fields are properly labeled\n- Test keyboard navigation through the form\n- Check color contrast for form elements\n- Verify screen reader compatibility\n\n## 6. Security Tests\n\n- Test input sanitization for all fields\n- Verify proper masking of sensitive data (SSN, account number)\n- Check for any data leakage in API responses\n- Test authentication and authorization for form access\n\n## Test Execution Plan\n\n1. Set up automated unit and integration tests using Jest and Vue Test Utils.\n2. Implement end-to-end tests using Playwright.\n3. Use `test/runtest.py` for running the test suite:\n   - Full test suite: `python runtest.py`\n   - Specific tests: `python runtest.py test_driver_form test_api_integration`\n4. Integrate tests into CI/CD pipeline for automatic execution on each commit.\n5. Implement real-time testing during development using a headless browser.\n\n## Best Practices\n\n- Write independent, maintainable tests\n- Aim for high code coverage (target: 80%+)\n- Regularly run the full test suite\n- Add specific tests for each new feature or bug fix\n- Include test reviews in the code review process\n\n## Next Steps\n\n1. Implement unit tests for all components and composables\n2. Set up integration tests for form submission flow\n3. Create end-to-end test scenarios using Playwright\n4. Implement performance testing scripts\n5. Conduct manual accessibility testing and implement automated checks where possible\n6. Perform security audit and penetration testing\n7. Set up continuous integration to run tests on each commit\n8. Regularly review and update test cases as the application evolves\n\n","labels":[{"id":"LA_kwDOMbwxg88AAAABsIO_0Q","name":"enhancement","description":"New feature or request","color":"a2eeef"}],"number":7,"title":"Driver Registration/Edit Form - Test Plan"},{"assignees":[],"body":"# Driver Registration/Edit Form - Technical Design Document\n\n## Overview\nThis document outlines the technical design for the Driver Registration and Edit form, based on the `haulblaze_contact` table structure.\n\n## Component Structure\n- Main Component: `DriverForm.vue`\n- Sub-components:\n  - `BaseInput.vue` (reusable input component)\n  - `BaseSelect.vue` (reusable select component)\n  - `BaseDatePicker.vue` (reusable date picker component)\n\n## Form Fields and UI Components\n\n| Field Name | UI Component | Type | Required | Notes |\n|------------|--------------|------|----------|-------|\n| first_name | BaseInput | text | Yes | |\n| last_name | BaseInput | text | Yes | |\n| date_of_birth | BaseDatePicker | date | Yes | |\n| warehouse | BaseSelect | select | Yes | Options from `area_code_enum_bd3e18a1` |\n| phone | BaseInput | tel | Yes | With validation |\n| email | BaseInput | email | No | With validation |\n| driver_license_no | BaseInput | text | Yes | |\n| social_security_no | BaseInput | text | Yes | With masking |\n| routing_number | BaseInput | text | No | |\n| account_number | BaseInput | text | No | With masking |\n| zelle | BaseInput | text | No | |\n| enroll_time | BaseDatePicker | datetime | No | Auto-filled, editable by admin |\n| status | BaseSelect | select | Yes | Options from `status_enum_31d11e70` |\n| team_name | BaseSelect | select | Yes | Options from `team_name_enum` |\n| driver_type | BaseSelect | select | Yes | Options from `driver_type_enum` |\n| commisson_rate | BaseInput | number | Yes | With validation (0-100) |\n| mail_street | BaseInput | text | No | |\n| mail_city | BaseInput | text | No | |\n| mail_state | BaseInput | text | No | |\n| mail_zip | BaseInput | number | No | With validation |\n| dl_expired_time | BaseDatePicker | date | Yes | |\n\n## Component Implementation\n\n```vue\n<!-- DriverForm.vue -->\n<template>\n  <form @submit.prevent=\"handleSubmit\" class=\"space-y-6\">\n    <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      <BaseInput v-model=\"form.first_name\" label=\"First Name\" name=\"first_name\" :rules=\"{ required: true }\" />\n      <BaseInput v-model=\"form.last_name\" label=\"Last Name\" name=\"last_name\" :rules=\"{ required: true }\" />\n      <BaseDatePicker v-model=\"form.date_of_birth\" label=\"Date of Birth\" name=\"date_of_birth\" :rules=\"{ required: true }\" />\n      <BaseSelect v-model=\"form.warehouse\" label=\"Warehouse\" name=\"warehouse\" :options=\"warehouseOptions\" :rules=\"{ required: true }\" />\n      <BaseInput v-model=\"form.phone\" label=\"Phone\" name=\"phone\" type=\"tel\" :rules=\"{ required: true, regex: /^\\+?[1-9]\\d{1,14}$/ }\" />\n      <BaseInput v-model=\"form.email\" label=\"Email\" name=\"email\" type=\"email\" :rules=\"{ email: true }\" />\n      <BaseInput v-model=\"form.driver_license_no\" label=\"Driver's License Number\" name=\"driver_license_no\" :rules=\"{ required: true }\" />\n      <BaseInput v-model=\"form.social_security_no\" label=\"Social Security Number\" name=\"social_security_no\" type=\"password\" :rules=\"{ required: true }\" />\n      <BaseInput v-model=\"form.routing_number\" label=\"Routing Number\" name=\"routing_number\" :rules=\"{ regex: /^\\d{9}$/ }\" />\n      <BaseInput v-model=\"form.account_number\" label=\"Account Number\" name=\"account_number\" type=\"password\" />\n      <BaseInput v-model=\"form.zelle\" label=\"Zelle\" name=\"zelle\" />\n      <BaseDatePicker v-model=\"form.enroll_time\" label=\"Enroll Time\" name=\"enroll_time\" :disabled=\"!isAdmin\" />\n      <BaseSelect v-model=\"form.status\" label=\"Status\" name=\"status\" :options=\"statusOptions\" :rules=\"{ required: true }\" />\n      <BaseSelect v-model=\"form.team_name\" label=\"Team Name\" name=\"team_name\" :options=\"teamOptions\" :rules=\"{ required: true }\" />\n      <BaseSelect v-model=\"form.driver_type\" label=\"Driver Type\" name=\"driver_type\" :options=\"driverTypeOptions\" :rules=\"{ required: true }\" />\n      <BaseInput v-model=\"form.commisson_rate\" label=\"Commission Rate\" name=\"commisson_rate\" type=\"number\" :rules=\"{ required: true, min: 0, max: 100 }\" />\n      <BaseInput v-model=\"form.mail_street\" label=\"Street Address\" name=\"mail_street\" />\n      <BaseInput v-model=\"form.mail_city\" label=\"City\" name=\"mail_city\" />\n      <BaseInput v-model=\"form.mail_state\" label=\"State\" name=\"mail_state\" />\n      <BaseInput v-model=\"form.mail_zip\" label=\"ZIP Code\" name=\"mail_zip\" type=\"number\" :rules=\"{ regex: /^\\d{5}(-\\d{4})?$/ }\" />\n      <BaseDatePicker v-model=\"form.dl_expired_time\" label=\"Driver's License Expiration Date\" name=\"dl_expired_time\" :rules=\"{ required: true }\" />\n    </div>\n    <Button type=\"submit\" :disabled=\"!isFormValid\">{{ isEditMode ? 'Update' : 'Register' }}</Button>\n  </form>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport { useForm } from 'vee-validate'\nimport { Button } from '@/components/ui/button'\nimport BaseInput from '@/components/BaseInput.vue'\nimport BaseSelect from '@/components/BaseSelect.vue'\nimport BaseDatePicker from '@/components/BaseDatePicker.vue'\nimport { useDriverForm } from '@/composables/useDriverForm'\nimport type { HaulblazeContact } from '@/types'\n\nconst props = defineProps<{\n  initialData?: Partial<HaulblazeContact>\n  isEditMode: boolean\n}>()\n\nconst { form, isFormValid, handleSubmit, warehouseOptions, statusOptions, teamOptions, driverTypeOptions } = useDriverForm(props.initialData)\n\nconst isAdmin = computed(() => {\n  // Logic to determine if current user is admin\n})\n</script>\n```\n\n## Composables\n\n```typescript\n// useDriverForm.ts\nimport { ref } from 'vue'\nimport { useForm } from 'vee-validate'\nimport type { HaulblazeContact } from '@/types'\nimport { submitDriverInfo } from '@/api/driver'\n\nexport function useDriverForm(initialData?: Partial<HaulblazeContact>) {\n  const form = ref<HaulblazeContact>({\n    first_name: '',\n    last_name: '',\n    date_of_birth: null,\n    warehouse: null,\n    phone: '',\n    email: null,\n    driver_license_no: '',\n    social_security_no: '',\n    routing_number: null,\n    account_number: null,\n    zelle: null,\n    enroll_time: new Date(),\n    status: 'Onboarding',\n    team_name: null,\n    driver_type: 'HAULER',\n    commisson_rate: 0,\n    mail_street: null,\n    mail_city: null,\n    mail_state: null,\n    mail_zip: null,\n    dl_expired_time: null,\n    ...initialData\n  })\n\n  const { handleSubmit, isSubmitting, errors } = useForm({\n    validationSchema: {\n      // Define validation schema here\n    }\n  })\n\n  const submitForm = handleSubmit(async (values) => {\n    try {\n      await submitDriverInfo(values)\n      // Handle successful submission\n    } catch (error) {\n      // Handle submission error\n    }\n  })\n\n  // Fetch options for select fields\n  const warehouseOptions = ref([])\n  const statusOptions = ref([])\n  const teamOptions = ref([])\n  const driverTypeOptions = ref([])\n\n  // Fetch options from API or use static data\n\n  return {\n    form,\n    isFormValid: computed(() => Object.keys(errors.value).length === 0),\n    handleSubmit: submitForm,\n    warehouseOptions,\n    statusOptions,\n    teamOptions,\n    driverTypeOptions\n  }\n}\n```\n\n## API Integration\n\n```typescript\n// api/driver.ts\nimport { supabase } from '@/lib/supabaseClient'\nimport type { HaulblazeContact } from '@/types'\n\nexport async function submitDriverInfo(data: HaulblazeContact) {\n  const { data: result, error } = await supabase\n    .from('haulblaze_contact')\n    .upsert(data)\n    .select()\n\n  if (error) throw error\n  return result\n}\n```\n\n## Types\n\n```typescript\n// types/index.ts\nexport interface HaulblazeContact {\n  id?: number\n  haulblaze_id?: string\n  first_name: string\n  last_name: string\n  date_of_birth: Date | null\n  warehouse: string | null\n  phone: string\n  email: string | null\n  driver_license_no: string\n  social_security_no: string\n  routing_number: string | null\n  account_number: string | null\n  zelle: string | null\n  enroll_time: Date\n  status: string\n  driver_id?: number[]\n  team_name: string | null\n  driver_type: string\n  commisson_rate: number\n  mail_street: string | null\n  mail_city: string | null\n  mail_state: string | null\n  mail_zip: number | null\n  dl_expired_time: Date | null\n  uid?: string\n  last_update?: Date\n  has_notification?: number\n}\n```\n\n## Dependencies\n- Vue 3\n- Vee-Validate for form validation\n- Tailwind CSS for styling\n- shadcn/vue for UI components\n- Supabase for backend integration\n- date-fns for date manipulation\n\n## Security Considerations\n- Implement input masking for sensitive fields (social_security_no, account_number)\n- Use HTTPS for all API communications\n- Encrypt sensitive data before sending to the server\n- Implement proper error handling to avoid leaking sensitive information\n- Use Supabase RLS (Row Level Security) to ensure users can only access their own data\n\n## Accessibility\n- Ensure all form fields have associated labels\n- Use ARIA attributes for improved screen reader support\n- Implement keyboard navigation support\n- Provide clear error messages and validation feedback\n\n## Next Steps\n1. Implement BaseInput, BaseSelect, and BaseDatePicker components\n2. Create the DriverForm component\n3. Implement the useDriverForm composable\n4. Set up API integration with Supabase\n5. Add unit tests for components and composables\n6. Implement form validation logic\n7. Create admin view for editing driver information\n8. Conduct accessibility testing\n9. Perform security audit\n10. Optimize performance, especially for large datasets","labels":[{"id":"LA_kwDOMbwxg88AAAABsIO_0Q","name":"enhancement","description":"New feature or request","color":"a2eeef"}],"number":6,"title":"Implement Public-Facing New Driver Registration Form"},{"assignees":[],"body":"# New Driver Registration Form Design Document\n\n## Overview\nDesign and implement a new driver registration form for our ride-sharing platform. This form will collect essential information from potential drivers to streamline the onboarding process.\n\n## Requirements\n1. Personal Information:\n   - Full Name\n   - Date of Birth\n   - Email Address\n   - Phone Number\n   - Home Address\n\n2. Driver's License Information:\n   - License Number\n   - Expiration Date\n   - State/Country of Issue\n\n3. Vehicle Information:\n   - Make\n   - Model\n   - Year\n   - License Plate Number\n\n4. Background Check Consent:\n   - Checkbox for agreeing to a background check\n\n5. Terms and Conditions:\n   - Checkbox for agreeing to the platform's terms and conditions\n\n6. Photo Upload:\n   - Driver's License (front and back)\n   - Profile Picture\n\n7. Validation:\n   - All fields should have proper validation (e.g., email format, date format)\n   - Required fields should be marked\n\n8. Responsive Design:\n   - The form should be fully responsive and work well on both desktop and mobile devices\n\n9. Accessibility:\n   - Ensure the form is accessible and follows WCAG 2.1 guidelines\n\n## Technical Considerations\n- Use Vue 3 composition API\n- Implement form using Nuxt 3 framework\n- Utilize Tailwind CSS for styling\n- Use shadcn/vue components where applicable\n- Implement client-side validation using Vuelidate or similar library\n- Use Supabase for data storage\n\n## Deliverables\n1. Vue component for the registration form\n2. Unit tests for the form component\n3. Integration tests for form submission\n4. Updated documentation in the project wiki\n\n## Acceptance Criteria\n1. All required information can be submitted through the form\n2. Form validates all inputs correctly\n3. Submission errors are handled gracefully and displayed to the user\n4. Successful submissions are stored in the database\n5. Form is responsive and works on various screen sizes\n6. All accessibility requirements are met\n7. Code passes all linting and style checks\n8. All tests pass successfully\n\n## Timeline\n- Design and Planning: 2 days\n- Implementation: 5 days\n- Testing and Bug Fixes: 3 days\n- Documentation: 1 day\n- Code Review and Final Adjustments: 2 days\n\nTotal Estimated Time: 13 working days","labels":[{"id":"LA_kwDOMbwxg88AAAABsIO_zQ","name":"documentation","description":"Improvements or additions to documentation","color":"0075ca"},{"id":"LA_kwDOMbwxg88AAAABsIO_0Q","name":"enhancement","description":"New feature or request","color":"a2eeef"}],"number":5,"title":"Implement New Driver Registration Form"},{"assignees":[],"body":"Created initial documentation improvement plan in wiki/documentation_improvement.md","labels":[],"number":3,"title":"Create Documentation Improvement Plan"}]
